name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        ports: ['5433:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.12.3' # Define the elixir version [required]
        otp-version: '24.1' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get
    - name: Run tests
      run: mix test

  deploy:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0
          
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8.1
      - name: Gigalixir CLI Install
        run: sudo pip install gigalixir --ignore-installed six
      - name: Gigalixir Login
        run: gigalixir login -e "${{secrets.GIGALIXIR_USERNAME}}" -p "${{secrets.GIGALIXIR_PASSWORD}}" -y
      - name: Gigalixir Git Remote
        run: gigalixir git:remote ${{secrets.GIGALIXIR_APP_NAME}}
      - name: Gigalixir Push
        run: git push -f gigalixir HEAD:refs/heads/master
      - name: Wait to be Healthy
        run: |
          echo "GIGALIXIR POD STATUS CHECK"
          for (( ; ; )) do
            echo "Checking the healthy of the pod..."
            export IS_HEALTHY=$(gigalixir ps | python3 -c "import sys, json; print(json.load(sys.stdin)['pods'][-1]['status'])")
            echo $IS_HEALTHY
            if [ $IS_HEALTHY == "Healthy" ] 
            then
              break
            fi
            sleep 2
          done
      - name: Setup ssh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/config

          printf "Host *\n StrictHostKeyChecking no" > ~/.ssh/config
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa

          chmod 0600 ~/.ssh/id_rsa
          chmod 0700 ~/.ssh
      - name: Gigalixir Run Migration
        run: gigalixir ps:migrate -a ${{ secrets.GIGALIXIR_APP_NAME }}

